input Registration {
  username: String!
  password: String!
}

input Login {
  username: String!
  password: String!
}

input UserID {
  id: String!
}

#input WhatBook {
#  author: String
#  title: String
#  genre: String
#}

type Depiction {
  res: String
}

type UserMeta {
  UID: String!
  Username: String!
}

type User {
  UID: String!
  Username: String!
  Password: String!
  Token: [String]
  LikedBooks: [String]
  WillingToRead: [String]
  DislikedBooks: [String]
  LikedGenres: [String]
}

type Book {
  uid: String!
  author: String
  title: String
  description: String
  coverURL: String
  genre: String
}

type CategorizedBooks {
  genre: String!
  books: [Book!]
}

type UsersBooks {
  slices: [CategorizedBooks!]
}

type Genre {
  name: String!
  liked: Boolean!
}

type Genres {
  genres: [Genre]!
}

type Query {
  ping: String!
  authorisedPing: String!
  books(input: UserID): UsersBooks!
  genres(input: UserID): Genres!
}

type Mutation {
  likeGenre(input: String): Depiction!
  register(input: Registration!): Depiction!
  login(input: Login!): Depiction!
  loginWithJWT: UserMeta!
}
