input Registration {
  username: String!
  password: String!
}

input Login {
  username: String!
  password: String!
}

input UserID {
  id: String!
}

type Depiction {
  res: String
}

type UserMeta {
  UID: String!
  Username: String!
}

type User {
  UID: String!
  Username: String!
  Password: String!
  Token: [String]
  LikedBooks: [String]
  WillingToRead: [String]
  DislikedBooks: [String]
  LikedGenres: [String]
}

type Book {
  uid: String!
  authors: [String]
  title: String
  description: String
  cover: Int
  genres: [String]
  inList: Int!
}

type CategorizedBooks {
  genre: String!
  books: [Book!]
}

type UsersBooks {
  slices: [CategorizedBooks!]
}

type Genre {
  name: String!
  liked: Boolean!
}

type Genres {
  genres: [Genre]!
}

type Query {
  ping: String!
  authorisedPing: String!
  categorizedBooks(input: UserID): UsersBooks!
  genres(input: UserID): Genres!
  lovedBooks: UsersBooks!
  dislikedBooks: UsersBooks!
  wtrBooks: UsersBooks!
}

type Mutation {
  loveBook(input: String!): Depiction!
  dislikeBook(input: String!): Depiction!
  addBookToWTR(input: String!): Depiction!
  cancelLoveBook(input: String!): Depiction!
  cancelDislikeBook(input: String!): Depiction!
  cancelAddBookToWTR(input: String!): Depiction!
  likeGenre(input: String!): Depiction!
  dislikeGenre(input: String!): Depiction!
  register(input: Registration!): Depiction!
  login(input: Login!): Depiction!
  loginWithJWT: UserMeta!
}
